name: Release Package CI

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

jobs:
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, windows-11-arm]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:          
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive

      - name: Install dependencies with vcpkg (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          if ("${{ matrix.os }}" -eq "windows-latest") {
            $VCPKG_TRIPLET = "x64-windows"
          } elseif ("${{ matrix.os }}" -eq "windows-11-arm") {
            $VCPKG_TRIPLET = "arm64-windows"
          }
          echo "VCPKG_TRIPLET=$VCPKG_TRIPLET" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          vcpkg install libusb:$VCPKG_TRIPLET

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Build wheels (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          $VCPKG_ROOT = $env:VCPKG_INSTALLATION_ROOT -replace '\\','/'
          $env:CIBW_ENVIRONMENT_WINDOWS = "VCPKG_ROOT=$VCPKG_ROOT VCPKG_TRIPLET=$env:VCPKG_TRIPLET"
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/wujihandpy
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Extract git tag & generate change log
        run: |
          GIT_TAG="$(git describe --tags --abbrev=0)"
          echo "GIT_TAG=$GIT_TAG" >> "$GITHUB_ENV"
          echo "Using git tag: $GIT_TAG"
          docker run -v "$PWD":/workdir quay.io/git-chglog/git-chglog $GIT_TAG > changelog.md
          cat changelog.md

      - name: Download all dists
        uses: actions/download-artifact@v5
        with:
          path: dist/
          pattern: dist-*
          merge-multiple: true

      - name: Publish distribution to PyPI
        if: github.ref_type == 'tag'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ github.ref_type != 'tag' }}
          make_latest: ${{ github.ref_type == 'tag' }}
          files: |
            dist/*.whl
